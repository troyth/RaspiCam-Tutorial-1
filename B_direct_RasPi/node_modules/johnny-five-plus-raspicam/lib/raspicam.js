var events = require("events"),
    exec = require("child_process").exec,
    util = require("util");


/**
 * RaspiCam
 * @constructor
 *
 * @description Generic analog or digital sensor constructor
 *
 * @param {Object} opts Options: pin, freq, range
 */
function RaspiCam( opts ) {

  if ( !(this instanceof RaspiCam) ) {
    return new RaspiCam( opts );
  }

  events.EventEmitter.call(this);

  var stills = [];

  // Sensor instance properties
  this.mode = opts.mode || 'still';//still or video
  this.freq = opts.freq || 0;//if 0, just a single still
  this.delay = opts.delay || 0;//time to wait til taking the picture
  this.width = opts.width || 640;
  this.height = opts.height || 480;
  this.quality = opts.quality || 80;//from 0-100
  this.encoding = opts.encoding || 'jpg';//jpg, gif, bmp, png
  this.filepath = opts.filepath || new Date().getTime() + '.' + this.encoding;

  this.length = opts.length || 5000;//length in ms of video



  if(this.mode == 'still'){
    //timelapse
    if(this.freq > 0){
      // Throttle
      setInterval(function() {
        var proc_cmd = 'raspistill'+
        ' -w ' + this.width +
        ' -h ' + this.height +
        ' -t '+ this.delay +
        ' -q ' + this.quality +
        ' -n -o ' + this.filepath;

        exec(proc_cmd, function (err, stdout, stderr) {
          this.emit( "read", err, this.filepath );
        });
      }.bind(this), this.freq );

    }else{//just a single still
		setTimeout(function(){
			var proc_cmd = 'raspistill'+
    		    ' -w ' + this.width +
    		    ' -h ' + this.height +
    		    ' -t '+ this.delay +
    		    ' -q ' + this.quality +
        		' -n -o ' + this.filepath;

			exec(proc_cmd, function (err, stdout, stderr) {
        		this.emit( "read", err, this.filepath );
      		});
		}.bind(this), this.delay);
    }
  }else if(this.mode == 'video'){

  }
}

util.inherits( RaspiCam, events.EventEmitter );


/**
 * pinMode Change the sensor's pinMode on the fly
 * @param  {Number} mode Sensor pin mode value
 * @return {Object} instance
RaspiCam.prototype.start = function( delay ) {
  
  return this;
};
 */


module.exports = RaspiCam;
